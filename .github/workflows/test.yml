name: Make release with Build binaries

on:
  push:
jobs:
  build:
 #   runs-on: ubuntu-latest
    name: 打包各种系统程序
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # build and publish in parallel: linux/386, linux/amd64, windows/386, windows/amd64, darwin/amd64, darwin/arm64
        goos: [linux, windows, darwin]
        goarch: ["386", amd64, arm, arm64]
        exclude:
          - goos: darwin
            goarch: arm
          - goos: darwin
            goarch: "386"
          - goos: windows
            goarch: arm64
          - goos: windows
            goarch: arm
      fail-fast: true
    steps:
    - uses: actions/checkout@master
    - name: 打包当前文件
      run: |
        pip install pyinstaller
        pyinstaller -F *.py
        
        
    #- name: PyInstaller Linux amd64
    #  id: amd64
    #   uses: action-python/pyinstaller-py3.7@amd64
    #  with:
    #    path: .

   # - name: Create Release
     # id: create_release
     # uses: actions/create-release@v1
     # env:
     #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
     # with:
       # tag_name: v0.11
      #  release_name: pythonproxy v0.11
      #  draft: false
       # prerelease: false
    - name: Create Release and Upload Release Asset
      uses: softprops/action-gh-release@v1
      with:
          tag_name: V0.${{ github.run_id }}.dev #V0.1 # 你也可以将其输入为V1.2……
          name: V0.${{ github.run_id }}.dev #V0.1 # 你也可以将其输入为V1.2……
          body: 测试自动发布版本号
          draft: false  # 是否是草稿
          prerelease: true # 是否是预览版
          files: |
            # 你要上传的文件
              dist/*

    #- name: Upload Linux File amd64
     # uses: actions/upload-release-asset@v1
     # env:
      #  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #  with:
       #   upload_url: ${{ steps.create_release.outputs.upload_url }} 
        #  asset_path: ${{ steps.amd64.outputs.location }}
        #  asset_name: ${{ steps.amd64.outputs.filename }}
       #   asset_content_type: ${{ steps.amd64.outputs.content_type }}
